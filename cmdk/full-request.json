{
  "model": "gpt-4o",
  "temperature": 0,
  "stop": ["\n// End Generation Here", "\n```"],
  "user": "github|24497652",
  "messages": [
    {
      "role": "system",
      "content": "You are an intelligent programmer. You are helping a colleague insert a piece of code in a file.\n\nYour colleague is going to give you a file and an insertion point, along with a set of instructions. Please write code at the insertion point following their instructions.\n\nThink carefully and critically about the code to insert that best follows their instructions.\n\nBe mindful of the surrounding code, especially the indentation level. If you need to import something but cannot at the insertion point, please omit the import statements."
    },
    {
      "role": "user",
      "content": "First, I will give you some potentially helpful context about my code.\nThen, I will show you the insertion point and give you the instruction. The insertion point will be in `src/index.ts`.\n\n\n-------\n\n## Potentially helpful context\n\n#### file_context_4\n\npackage.json from line 1:\n```\n{\n  \"name\": \"openai-caching-proxy-worker\",\n  \"version\": \"0.0.0\",\n  \"devDependencies\": {\n    \"@cloudflare/workers-types\": \"^4.20221111.1\",\n    \"@types/jest\": \"^29.2.4\",\n    \"@typescript-eslint/eslint-plugin\": \"^5.46.0\",\n    \"@typescript-eslint/parser\": \"^5.46.0\",\n    \"eslint\": \"^8.29.0\",\n    \"eslint-config-prettier\": \"^8.5.0\",\n    \"eslint-import-resolver-typescript\": \"^3.5.2\",\n    \"eslint-plugin-eslint-comments\": \"^3.2.0\",\n    \"eslint-plugin-import\": \"^2.26.0\",\n    \"eslint-plugin-jest\": \"^27.1.6\",\n    \"eslint-plugin-json\": \"^3.1.0\",\n    \"eslint-plugin-no-async-without-await\": \"^1.2.0\",\n    \"eslint-plugin-prettier\": \"^4.2.1\",\n    \"jest\": \"^29.3.1\",\n    \"jest-environment-miniflare\": \"^2.11.0\",\n    \"prettier\": \"^2.8.1\",\n    \"ts-jest\": \"^29.0.3\",\n    \"ts-node\": \"^10.9.1\",\n    \"tsconfig-paths\": \"^4.1.1\",\n    \"tsconfig-paths-jest\": \"^0.0.1\",\n    \"typescript\": \"^4.9.4\",\n    \"wrangler\": \"^3.88.0\",\n    \"yarn-deduplicate\": \"^6.0.0\"\n  },\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"wrangler dev\",\n    \"deploy\": \"wrangler deploy\",\n    \"check-types\": \"tsc --noEmit\",\n    \"deduplicate\": \"yarn-deduplicate && yarn install\",\n    \"lint\": \"yarn lint:ts --cache\",\n    \"lint:ci\": \"yarn lint:ts\",\n    \"lint:ts\": \"eslint . --ext .js,.ts,.json\",\n    \"prettier:all\": \"prettier --write \\\"**/*.+(js|jsx|ts|tsx|json|css|html)\\\"\",\n    \"test\": \"jest --config test/jest.config.js\"\n  },\n  \"dependencies\": {\n    \"@upstash/redis\": \"^1.18.1\"\n  }\n}\n\n\n\n```\n\n#### file_context_3\n\nwrangler.toml from line 1:\n```\nname = \"openai-caching-proxy-worker\"\nmain = \"src/index.ts\"\ncompatibility_date = \"2022-12-11\"\n\n# This cloudflare worker uses either Upstash or workers KV to store cache.\n\n# To use Upstash (hosted redis-over-REST),\n# https://docs.upstash.com/redis/quickstarts/cloudflareworkers\n# \n# 1. signing up for a free account at upstash.com, set your secrets below based on instructions\n# here for `wrangler secret put` (or alternatively use the Cloudflare Workers web UI):\n# https://developers.cloudflare.com/workers/platform/environment-variables/#adding-secrets-via-wrangler\n# 2. Uncomment following environment variables config:\n# [vars]\n# - UPSTASH_REDIS_REST_TOKEN\n# - UPSTASH_REDIS_REST_URL\n\n# To use workers KV,\n# 1. Run `wrangler kv:namespace create <YOUR_NAMESPACE>` in your terminal\n# 2. Uncomment following config and fill in <YOUR_ID>:\n# kv_namespaces = [\n#    { binding = \"OPENAI_CACHE\", id = \"<YOUR_ID>\" }\n# ]\n# wrangler.toml (wrangler v3.88.0^)\n[observability.logs]\nenabled = true\n\n```\n\n#### file_context_2\n\nwrangler.toml from line 1:\n```\nname = \"openai-caching-proxy-worker\"\nmain = \"src/index.ts\"\ncompatibility_date = \"2022-12-11\"\n\n# This cloudflare worker uses either Upstash or workers KV to store cache.\n\n# To use Upstash (hosted redis-over-REST),\n# https://docs.upstash.com/redis/quickstarts/cloudflareworkers\n# \n# 1. signing up for a free account at upstash.com, set your secrets below based on instructions\n# here for `wrangler secret put` (or alternatively use the Cloudflare Workers web UI):\n# https://developers.cloudflare.com/workers/platform/environment-variables/#adding-secrets-via-wrangler\n# 2. Uncomment following environment variables config:\n# [vars]\n# - UPSTASH_REDIS_REST_TOKEN\n# - UPSTASH_REDIS_REST_URL\n\n# To use workers KV,\n# 1. Run `wrangler kv:namespace create <YOUR_NAMESPACE>` in your terminal\n# 2. Uncomment following config and fill in <YOUR_ID>:\n# kv_namespaces = [\n#    { binding = \"OPENAI_CACHE\", id = \"<YOUR_ID>\" }\n# ]\n# wrangler.toml (wrangler v3.88.0^)\n[observability.logs]\nenabled = true\n\n```\n\n#### file_context_1\n\nsrc/proxy.ts from line 1:\n```\nimport { getCacheKey, ResponseCache } from './cache';\nimport { Env } from './env';\nimport { getHeadersAsObject } from './utils';\n\ninterface HandleProxyOpts {\n  request: Request;\n  env: Env;\n  ctx: ExecutionContext;\n  ttl: number | null;\n  pathname: string;\n}\nexport const handleProxy = async ({\n  request,\n  env,\n  ctx,\n  ttl,\n  pathname,\n}: HandleProxyOpts): Promise<Response> => {\n  const fetchMethod = request.method;\n  const fetchPath = pathname.replace(/^\\/proxy/, '');\n  const fetchUrl = `https://api.openai.com/v1${fetchPath}`;\n  const fetchHeaders = getHeadersAsObject(request.headers);\n  const fetchBody = await request.text();\n  const forceRefresh = request.headers.get('X-Proxy-Refresh') === 'true';\n\n  const cacheKey = await getCacheKey({\n    authHeader: request.headers.get('authorization'),\n    body: fetchBody,\n    method: fetchMethod,\n    path: fetchPath,\n  });\n  const responseCache = new ResponseCache({ env });\n\n  if (forceRefresh) {\n    console.log('X-Proxy-Refresh was true, forcing a cache refresh.');\n  } else {\n    const cachedResponse = await responseCache.read({ cacheKey });\n    if (cachedResponse) {\n      console.log('Returning cached response.');\n      return cachedResponse;\n    }\n  }\n\n  console.log('No cached response found. Proxying and caching response instead.');\n\n  const response = await fetch(fetchUrl, {\n    method: fetchMethod,\n    headers: fetchHeaders,\n    body: fetchBody || null,\n  });\n\n  if (response.ok) {\n    console.log('Writing 2xx response to cache: ', { cacheKey, ttl });\n    const writeCachePromise = responseCache.write({\n      cacheKey,\n      ttl,\n      response,\n    });\n    // https://developers.cloudflare.com/workers/runtime-apis/fetch-event/#waituntil\n    ctx.waitUntil(writeCachePromise);\n  } else {\n    console.log('Not caching error or empty response.');\n  }\n\n  return response;\n\n\n```\n\n#### file_context_0\n\nsrc/fuck.json from line 1:\n```\n[\n  {\n    \"role\": \"system\",\n    \"content\": \"You are an intelligent programmer. You are helping a colleague rewrite a piece of code.\\n\\nYour colleague is going to give you a file and a selection to edit, along with a set of instructions. Please rewrite the selected code according to their instructions.\\n\\nThink carefully and critically about the rewrite that best follows their instructions.\"\n  },\n  {\n    \"role\": \"user\",\n    \"content\": \"First, I will give you some potentially helpful context about my code.\\nThen, I will show you the selection and give you the instruction. The selection will be in `src/index.ts`.\\n\\n\\n-------\\n\\n## Potentially helpful context\\n\\n#### file_context_4\\n\\nwrangler.toml from line 1:\\n```\\nname = \\\"openai-caching-proxy-worker\\\"\\nmain = \\\"src/index.ts\\\"\\ncompatibility_date = \\\"2022-12-11\\\"\\n\\n# This cloudflare worker uses either Upstash or workers KV to store cache.\\n\\n# To use Upstash (hosted redis-over-REST),\\n# https://docs.upstash.com/redis/quickstarts/cloudflareworkers\\n# \\n# 1. signing up for a free account at upstash.com, set your secrets below based on instructions\\n# here for `wrangler secret put` (or alternatively use the Cloudflare Workers web UI):\\n# https://developers.cloudflare.com/workers/platform/environment-variables/#adding-secrets-via-wrangler\\n# 2. Uncomment following environment variables config:\\n# [vars]\\n# - UPSTASH_REDIS_REST_TOKEN\\n# - UPSTASH_REDIS_REST_URL\\n\\n# To use workers KV,\\n# 1. Run `wrangler kv:namespace create <YOUR_NAMESPACE>` in your terminal\\n# 2. Uncomment following config and fill in <YOUR_ID>:\\n# kv_namespaces = [\\n#    { binding = \\\"OPENAI_CACHE\\\", id = \\\"<YOUR_ID>\\\" }\\n# ]\\n# wrangler.toml (wrangler v3.88.0^)\\n[observability.logs]\\nenabled = true\\n\\n```\\n\\n#### file_context_3\\n\\nwrangler.toml from line 1:\\n```\\nname = \\\"openai-caching-proxy-worker\\\"\\nmain = \\\"src/index.ts\\\"\\ncompatibility_date = \\\"2022-12-11\\\"\\n\\n# This cloudflare worker uses either Upstash or workers KV to store cache.\\n\\n# To use Upstash (hosted redis-over-REST),\\n# https://docs.upstash.com/redis/quickstarts/cloudflareworkers\\n# \\n# 1. signing up for a free account at upstash.com, set your secrets below based on instructions\\n# here for `wrangler secret put` (or alternatively use the Cloudflare Workers web UI):\\n# https://developers.cloudflare.com/workers/platform/environment-variables/#adding-secrets-via-wrangler\\n# 2. Uncomment following environment variables config:\\n# [vars]\\n# - UPSTASH_REDIS_REST_TOKEN\\n# - UPSTASH_REDIS_REST_URL\\n\\n# To use workers KV,\\n# 1. Run `wrangler kv:namespace create <YOUR_NAMESPACE>` in your terminal\\n# 2. Uncomment following config and fill in <YOUR_ID>:\\n# kv_namespaces = [\\n#    { binding = \\\"OPENAI_CACHE\\\", id = \\\"<YOUR_ID>\\\" }\\n# ]\\n# wrangler.toml (wrangler v3.88.0^)\\n[observability.logs]\\nenabled = true\\n\\n```\\n\\n#### file_context_2\\n\\nsrc/fuck.json from line 1:\\n```\\nFirst, I will give you some potentially helpful context about my code.\\nThen, I will show you the insertion point and give you the instruction. The insertion point will be in src/index.ts.\\n-------\\nPotentially helpful context\\nfile_context_4\\nsrc/utils.ts from line 1:\\n;\\nfile_context_3\\npackage.json from line 1:\\n\\n\\n```\\n\\n#### file_context_1\\n\\npackage.json from line 1:\\n```\\n{\\n  \\\"name\\\": \\\"openai-caching-proxy-worker\\\",\\n  \\\"version\\\": \\\"0.0.0\\\",\\n  \\\"devDependencies\\\": {\\n    \\\"@cloudflare/workers-types\\\": \\\"^4.20221111.1\\\",\\n    \\\"@types/jest\\\": \\\"^29.2.4\\\",\\n    \\\"@typescript-eslint/eslint-plugin\\\": \\\"^5.46.0\\\",\\n    \\\"@typescript-eslint/parser\\\": \\\"^5.46.0\\\",\\n    \\\"eslint\\\": \\\"^8.29.0\\\",\\n    \\\"eslint-config-prettier\\\": \\\"^8.5.0\\\",\\n    \\\"eslint-import-resolver-typescript\\\": \\\"^3.5.2\\\",\\n    \\\"eslint-plugin-eslint-comments\\\": \\\"^3.2.0\\\",\\n    \\\"eslint-plugin-import\\\": \\\"^2.26.0\\\",\\n    \\\"eslint-plugin-jest\\\": \\\"^27.1.6\\\",\\n    \\\"eslint-plugin-json\\\": \\\"^3.1.0\\\",\\n    \\\"eslint-plugin-no-async-without-await\\\": \\\"^1.2.0\\\",\\n    \\\"eslint-plugin-prettier\\\": \\\"^4.2.1\\\",\\n    \\\"jest\\\": \\\"^29.3.1\\\",\\n    \\\"jest-environment-miniflare\\\": \\\"^2.11.0\\\",\\n    \\\"prettier\\\": \\\"^2.8.1\\\",\\n    \\\"ts-jest\\\": \\\"^29.0.3\\\",\\n    \\\"ts-node\\\": \\\"^10.9.1\\\",\\n    \\\"tsconfig-paths\\\": \\\"^4.1.1\\\",\\n    \\\"tsconfig-paths-jest\\\": \\\"^0.0.1\\\",\\n    \\\"typescript\\\": \\\"^4.9.4\\\",\\n    \\\"wrangler\\\": \\\"^3.88.0\\\",\\n    \\\"yarn-deduplicate\\\": \\\"^6.0.0\\\"\\n  },\\n  \\\"private\\\": true,\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"wrangler dev\\\",\\n    \\\"deploy\\\": \\\"wrangler deploy\\\",\\n    \\\"check-types\\\": \\\"tsc --noEmit\\\",\\n    \\\"deduplicate\\\": \\\"yarn-deduplicate && yarn install\\\",\\n    \\\"lint\\\": \\\"yarn lint:ts --cache\\\",\\n    \\\"lint:ci\\\": \\\"yarn lint:ts\\\",\\n    \\\"lint:ts\\\": \\\"eslint . --ext .js,.ts,.json\\\",\\n    \\\"prettier:all\\\": \\\"prettier --write \\\\\\\"**/*.+(js|jsx|ts|tsx|json|css|html)\\\\\\\"\\\",\\n    \\\"test\\\": \\\"jest --config test/jest.config.js\\\"\\n  },\\n  \\\"dependencies\\\": {\\n    \\\"@upstash/redis\\\": \\\"^1.18.1\\\"\\n  }\\n}\\n\\n\\n\\n```\\n\\n#### file_context_0\\n\\nsrc/cache.ts from line 1:\\n```\\nimport { Redis } from '@upstash/redis/cloudflare';\\nimport { Env } from './env';\\nimport { getHeadersAsObject, objectHash } from './utils';\\n\\ninterface AnyObject {\\n  [key: string]: any;\\n}\\n\\nfunction sortObjectKeys(obj: AnyObject): AnyObject {\\n  const sortedKeys = Object.keys(obj).sort();\\n  const sortedObj: AnyObject = {};\\n\\n  sortedKeys.forEach((key) => {\\n    if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\\n      sortedObj[key] = sortObjectKeys(obj[key]);\\n    } else if (Array.isArray(obj[key])) {\\n      sortedObj[key] = obj[key].map((item: any) => {\\n        if (typeof item === 'object' && !Array.isArray(item)) {\\n          return sortObjectKeys(item);\\n        }\\n        return item;\\n      });\\n    } else {\\n      sortedObj[key] = obj[key];\\n    }\\n  });\\n\\n  return sortedObj;\\n}\\n\\ninterface GetCacheKeyProps {\\n  method: string;\\n  path: string;\\n  authHeader: string | null;\\n  body: string | null;\\n}\\n\\nexport const getCacheKey = async (props: GetCacheKeyProps): Promise<string> => {\\n  // https://stackoverflow.com/a/40924449\\n  const propsWithoutUndefined = Object.keys(props).reduce((acc, key) => {\\n    const _acc: Record<string, any> = acc;\\n    let propValue = (props as any)[key];\\n    if (key === 'body' && propValue !== '') {\\n      try {\\n        const body = JSON.parse(propValue);\\n        const sortedBody: AnyObject = {};\\n        const sortedKeys = Object.keys(body).sort();\\n        sortedKeys.forEach((key) => {\\n          if (typeof body[key] === 'object' && !Array.isArray(body[key])) {\\n            sortedBody[key] = sortObjectKeys(body[key]);\\n\\n\\n```\\n\\n\\n\\nThis is my current file. The selection will be denoted by comments \\\"Start of Selection\\\" and \\\"End of Selection\\\":\\n```src/index.ts\\n// Start of Selection\\nimport { Env } from './env';\\nimport { handleProxy } from './proxy';\\n\\nexport default {\\n  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\\n    const { pathname } = new URL(request.url);\\n    console.log(`Received request for pathname: ${pathname}`);\\n\\n    if (request.method === 'POST') {\\n      const requestBody = await request.clone().text();\\n      console.log({ requestBody });\\n      try {\\n        const parsedRequestBody = JSON.parse(requestBody);\\n        console.log({ parsedRequestBody });\\n      } catch (error) {\\n        console.error('Failed to parse request body as JSON:', error);\\n      }\\n    }\\n    return await handleProxy({\\n      request,\\n      env,\\n      ctx,\\n      ttl: null,\\n      pathname,\\n    });\\n  },\\n};\\n\\n// End of Selection\\n\\n\\n```\"\n  },\n  {\n    \"role\": \"user\",\n    \"content\": \"Please rewrite this selection following these instructions:\\n\\n## Edit Prompt\\n\\nmake the output more readible \\n\\n## Selection to Rewrite\\n```src/index.ts\\n// Start of Selection\\nimport { Env } from './env';\\nimport { handleProxy } from './proxy';\\n\\nexport default {\\n  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\\n    const { pathname } = new URL(request.url);\\n    console.log(`Received request for pathname: ${pathname}`);\\n\\n    if (request.method === 'POST') {\\n      const requestBody = await request.clone().text();\\n      console.log({ requestBody });\\n      try {\\n        const parsedRequestBody = JSON.parse(requestBody);\\n        console.log({ parsedRequestBody });\\n      } catch (error) {\\n        console.error('Failed to parse request body as JSON:', error);\\n      }\\n    }\\n    return await handleProxy({\\n      request,\\n      env,\\n      ctx,\\n      ttl: null,\\n      pathname,\\n    });\\n  },\\n};\\n\\n// End of Selection\\n```\\nPlease rewrite the selected code according to the instructions. Remember to only rewrite the code in the selection.\\n\\n\\n\\nPlease format your output as:\\n```\\n// Start of Selection\\n// INSERT_YOUR_REWRITE_HERE\\n// End of Selection\\n```\\n\\nImmediately start your response with ```\"\n  }\n]\n\n\n```\n\n\n\nThis is my current file. The insertion point will be denoted by the comments: Start Generation Here and End Generation Here\n```src/index.ts\nimport { Env } from './env';\nimport { handleProxy } from './proxy';\n\nexport default {\n  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\n    const { pathname } = new URL(request.url);\n    console.log(`Received request for pathname: ${pathname}`);\n\n    if (request.method === 'POST') {\n      const requestBody = await request.clone().text();\n      console.log({ requestBody });\n      try {\n        const parsedRequestBody = JSON.parse(requestBody);\n        console.log({ parsedRequestBody });\n      } catch (error) {\n        console.error('Failed to parse request body as JSON:', error);\n      }\n    }\n    const response = await handleProxy({\n      request,\n      env,\n      ctx,\n      ttl: null,\n      pathname,\n    });\n    const responseBody = await response.clone().text();\n    console.log('Response Body:', responseBody);\n    return response;\n  },\n};\n\n// Start Generation Here\n// End Generation Here\n\n\n\n\n\n```"
    },
    {
      "role": "user",
      "content": "## Instructions\n\n### Generation Prompt\n\ntest\n\n\n## Your Task\n\nGenerate the code to be inserted in accordance with the instructions.\n\nPlease format your output as:\n```\n// Start Generation Here\n// INSERT_YOUR_CODE\n// End Generation Here\n```\n\nImmediately start your response with ```"
    }
  ],
  "stream": true
}
